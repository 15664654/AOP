<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<chapter xml:id="aop.pointcut" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Pointcut syntax</title>
 <para>
  Poincuts are predicates that matches join points. Advices are associated with a pointcut expression and runs at any join point
  matched by the pointcut.
 </para>
 <para>
  Pointcuts can describe functions, method calls (public, protected, private, static or not) and properties operations
  (read, write, public, protected or private).
 </para>
 <para>
  Pointcuts can contain namespaces if needed.
 </para>
 <para>
  The special character * (wildcard) can be use to match any number of any character for a given element (namespace element,
  function name, method name, class name or property name).
 </para>
 <para>
  Two wildcards ** will match any number of any character for the namespace path.
 </para>
 <para>
  When describing a function call or a method call, pointcuts must end with parenthesis (). When describing a property
  operation, pointcuts should contain only the class and property name, with no parenthesis.
 </para>
 <warning>
  <para>
   As PHP itself, pointcuts are case sensitive while describing properties but are case insensitive while describing
   functions, methods, classes, interfaces or traits.
  </para>
 </warning>
 <para>
  <example><title>Function calls</title>
   <para>
    The following example shows several syntax for describing a function call using namespaces or not.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
namespace Foo {
   function foo(){}
   function bar(){}
}

namespace Bar {
   function foo(){}
   function bar(){}
}


namespace {
   function foo() {}
   function fooBar() {}
   function someBar(){}
   class Foo {
      public function foo() {
      }
   }

   $showMatch = function (AopJoinPoint $jp) {
      echo "The pointcut [".$jp->getPointCut()."] match with ".$jp->getFunctionName()."\n";
   };

   aop_add_before('foo()', $showMatch);
   aop_add_before('foo*()', $showMatch);
   aop_add_before('*bar()', $showMatch);
   aop_add_before('foo\\bar()', $showMatch);
   aop_add_before('foo\\b*()', $showMatch);
   aop_add_before('f*\\bar()', $showMatch);
   aop_add_before('**\\*()', $showMatch);

   foo();
   fooBar();
   someBar();

   foo\bar();
   foo\foo();

   bar\foo();
   bar\bar();
}
?>
]]>
   </programlisting>
  </example>
 </para>

 <para>
  <example><title>Method calls</title>
   <para>
    The following example shows several syntax for describing a method call.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
//will match Foo->bar(), foo->Bar() and foo->bar(), where Foo is the type (class, interface or trait) of the object and bar the name of the called method.
//Won't match namespaceFoo\Foo->Bar()
$pointcut = 'Foo->bar()';

//will match Foo->bar(), fooBar->bar(), anything->bar() but NOT namespaceFoo\foo->Bar();
$pointcut = '*->bar()';

//will match foo->bar(), foo->fooBar(), fooBarFoo->foofooBar() but NOT namespace1\foo->bar()
$pointcut = '*foo->*bar()';

//will match foo\bar->bar(), foo\foo->bar() but NOT foo\bar\foo->bar();
$pointcut = 'foo\\*->bar()';

//will match foobar\foobar\anything->bar(), but NOT foobar\foo->bar()
$pointcut = '*bar\\foo*\\*->bar()';

//will match any method of objects of any types in any namespaces
$pointcut = '**\\*->*()';
?>
]]>
   </programlisting>
  </example>
 </para>

 <para>
  <example><title>Property operation</title>
   <para>
    The following example shows several syntax for describing a property operation.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
//will match echo Foo->bar, foo->bar = 'foo' and Foo->bar++, where Foo is the type (class, interface or trait) of the object and bar the name of the accessed property
//Won't match namespaceFoo\Foo->bar or Foo->Bar (case sensitive)
$pointcut = 'Foo->bar';

//will match echo Foo->bar, fooBar->bar, anything->bar but NOT namespaceFoo\foo->bar (namespace does not match);
$pointcut = '*->bar';

//will match foo->bar, foo->Foobar, fooBarFoo->fooFoobar but NOT namespace1\foo->bar (namespace does not match)
$pointcut = '*foo->*bar';

//will match foo\bar->bar, foo\foo->bar but NOT foo\bar\foo->bar (the object should be directly in the foo namespace);
$pointcut = 'foo\\*->bar';

//will match foobar\foobar\anything->bar, but NOT foobar\foo->bar (the object should be in a two level namespace described as in the pointcut)
$pointcut = '*bar\\foo*\\*->bar';

//will match any property operation of objects of any types in any namespaces
$pointcut = '**\\*->*';
?>
]]>
   </programlisting>
  </example>
 </para>

 <para>
  <example><title>Using visibility operators</title>
   <para>
    The following example shows several syntax for describing operations that takes visibility into account
   </para>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
   //Will be matched by 'public Foo->bar()', but not by 'protected Foo->bar()'
   public function bar () {
   }

   //will be matched by '!public Foo->foo()', 'protected | private Foo->foo()'
   protected function foo () {
   }
}

$showMatch = function (AopJoinPoint $jp) {
   echo "The pointcut [".$jp->getPointCut()."] match with ".$jp->getClassName()."->".$jp->getFunctionName()."\n";
};

aop_add_before('protected Foo->foo()', $showMatch);
?>
]]>
   </programlisting>
  </example>
 </para>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
